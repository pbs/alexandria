// Reset the box-sizing

* {
  box-sizing: border-box;
}

*:before,
*:after {
  box-sizing: border-box;
}

// Base elements
html {
  font-size: $font-size-base;
  -webkit-tap-highlight-color: rgba($black, 0);

  // Okay, so we were having a *bunch* of issues with the page header in iOS.
  // For reasons that are still a mystery, when the left hand menu was opened,
  // it didn't stay fixed to the top of the page.
  // There seems to be a weird layout that gets invoked with pages
  // that expand beyond the viewport and fixed elements, such as the header.
  // So, for reasons that are also still a mystery, if we give the <html> element an overflow value
  // that is *not* the default (which is `visible`) the layout rights itself.
  // Using "auto" seemed like a safe choice that won't wreak havok,
  // as it's up to the browser to decide what the overflow should be.
  overflow: auto;
}

body {
  transition: all $duration;
  background: $gray-lighter;
  color: $gray-primary;
  font-family: $sans-serif;
  font-weight: $normal;
  line-height: $line-height;
  overflow-x: hidden;

  @include breakpoint($lg) {
    background: $gray-lighter url('../images/container-shadow.png') repeat-y top center;
  }

}



// Media

// Figures
//
// We reset this here because previously Normalize had no `figure` margins. This
// ensures we don't break anyone's use of the element.

figure {
  margin: 0;
}

// Images

img {
  vertical-align: middle;
}

// Responsive images (ensure images don't scale beyond their parents)
.img-responsive {
  display: block;
  width: 100%;
  max-width: 100%; // Part 1: Set a maximum relative to the parent
  height: auto;
}

// container used in the responsive images jQuery plugin;
picture {
  display: block;
}

// Themes

// themes are typically applied to a section tag on landing pages;
// the theme dictates the background color and adds a dropshadow to the compoennt;
.theme-darker,
.theme-dark,
.theme-light,
.theme-lighter,
.theme-lightest {
  position: relative;
  overflow: auto;

  // dropshadow (looks like it's applied to the element above this component);
  &::after {
    display: block;
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    height: 3px;
    background: linear-gradient(to bottom, $gray-medium 0%, rgba($black, 0) 100%);
    content: '';
    z-index: 1;
  }
}

.theme-darker {
  background: $gray-darker;
}

.theme-dark {
  background: $gray-dark;
}

.theme-light {
  background: $gray-light;
}

.theme-lighter {
  background: $gray-lighter;
}

.theme-lightest {
  background: $white;
}

// Helper classes

// Used for hidden objects that are sometimes revealed
.is-hidden {
  display: none !important;
  visibility: hidden;
}

// User to display hidden things temporarily
.is-visible {
  display: block !important;
  visibility: visible !important;
}

// Hide only visually, but have it available for screenreaders: by Jon Neal. www.webaim.org/techniques/css/invisiblecontent/  &  j.mp/visuallyhidden
.visuallyhidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  overflow: hidden;
  clip: rect(0 0 0 0);

  // Extends the .visuallyhidden class to allow the element to be focusable when navigated to via the keyboard: drupal.org/node/897638
  &.focusable {
    &:active,
    &:focus {
      position: static;
      width: auto;
      height: auto;
      margin: 0;
      overflow: visible;
      clip: auto;
    }
  }
}

// Hide visually and from screenreaders, but maintain layout
.invisible {
  visibility: hidden;
}

// Component animations
.fade {
  opacity: 0;
  transition: opacity .15s linear;
  &.in {
    opacity: 1;
  }
}

//for all times formatted by js
.schedule__time {
  transition: opacity 100ms linear 150ms;
  opacity: 0;
  overflow: hidden;
}

.schedule__time--formatted {
  opacity: 1;
}
